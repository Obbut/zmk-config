/*
 * Copyright (c) 2023 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

/* Uncomment this block if using RGB
&led_strip {
    chain-length = <6>;
    // chain-length = <31>; // Uncomment if using both per-key and underglow LEDs
    // chain-length = <25>; // Uncomment if using only per-key LEDs.
};
 */

#define DEFAULT 0
#define FUNCTION 1
#define RAISE 2

&led_strip { chain-length = <50>; };

/ {
    macros {
        // Source: https://zmk.dev/docs/behaviors/macros
        /**
        * Temporarily switches to a layer (`&mo`) while a modifier is held.
        * Analogous to QMK's `LM()`, using a parameterized macro.
        *
        * Params:
        *  1. Layer to switch to
        *  2. Modifier to press while layer is active
        *
        * Example:
        *  `&lm NUM_LAYER LSHIFT`
        */

        lm: lm {
            compatible = "zmk,behavior-macro-two-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <2>;
            bindings =
                <&macro_param_1to1>,
                <&macro_press>,
                <&mo MACRO_PLACEHOLDER &macro_param_2to1>,
                <&macro_press>,
                <&kp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_param_2to1>,
                <&macro_release>,
                <&kp MACRO_PLACEHOLDER &macro_param_1to1>,
                <&macro_release>,
                <&mo MACRO_PLACEHOLDER>;
        };

        rhyper_macro: rhyper_layer {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&lm 4 RS(RA(RC(RCMD)))>;
            label = "RHYPER_LAYER";
        };
    };

    behaviors {
        rhyper_behavior: rhyper_behavior {
            compatible = "zmk,behavior-hold-tap";
            label = "RHYPER_BEHAVIOR";
            bindings = <&rhyper_macro>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        rgb_encoder: rgb_encoder {
            compatible = "zmk,behavior-sensor-rotate";
            label = "RGB_ENCODER";
            #sensor-binding-cells = <0>;
            bindings = <&rgb_ug RGB_EFF>, <&rgb_ug RGB_EFR>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp TAB                   &kp Q  &kp W  &kp F       &kp P      &kp B                                    &kp J      &kp L      &kp U      &kp Y    &kp SEMI  &kp BSPC
&mt RS(RA(RC(RCMD))) ESC  &kp A  &kp R  &kp S       &kp T      &kp G                                    &kp M      &kp N      &kp E      &kp I    &kp O     &kp SQT
&kp LSHFT                 &kp Z  &kp X  &kp C       &kp D      &kp V     &none     &none  &mo 1  &none  &kp K      &kp H      &kp COMMA  &kp DOT  &kp FSLH  &kp RET
                                        &kp C_MUTE  &kp LCTRL  &kp LCMD  &kp LALT  &mo 3  &none  &mo 2  &kp SPACE  &kp ENTER  &none
            >;

            sensor-bindings =
                <&inc_dec_kp C_VOL_UP C_VOL_DN>,
                <&inc_dec_kp C_BRIGHTNESS_INC C_BRIGHTNESS_DEC>;
        };

        function_layer {
            bindings = <
&trans  &kp F11  &kp F12  &kp F13          &kp F14  &kp F15                                                    &none         &out OUT_BLE  &out OUT_USB  &none         &trans  &bt BT_CLR
&trans  &kp F6   &kp F7   &kp F8           &kp F9   &kp F10                                                    &none         &bt BT_SEL 4  &none         &none         &trans  &trans
&trans  &kp F1   &kp F2   &kp F3           &kp F4   &kp F5   &trans  &trans  &trans           &trans           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &trans  &trans
                          &rgb_ug RGB_TOG  &trans   &trans   &trans  &trans  &rgb_ug RGB_EFR  &rgb_ug RGB_EFF  &trans        &trans        &trans
            >;

            sensor-bindings = <&rgb_encoder>;
        };

        symbol_raise {
            bindings = <
&kp GRAVE  &kp EXCL     &kp AT     &kp LBRC  &kp RBRC  &none                                             &none   &kp N7  &kp N8  &kp N9  &kp MINUS   &trans
&trans     &kp HASH     &kp DLLR   &kp LPAR  &kp RPAR  &kp COLON                                         &none   &kp N4  &kp N5  &kp N6  &kp PLUS    &kp EQUAL
&trans     &kp PERCENT  &kp CARET  &kp LBKT  &kp RBKT  &none      &none          &none   &none   &none   &kp N0  &kp N1  &kp N2  &kp N3  &kp KP_DOT  &kp BSLH
                                   &trans    &trans    &trans     &kp LG(SPACE)  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        move_lower {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                                  &none     &none     &none   &none      &kp DEL  &kp BSPC
&trans  &trans  &trans  &trans  &trans  &trans                                  &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &trans   &none
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &none     &none     &none   &none      &none    &trans
                        &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans    &trans
            >;
        };

        rhyper {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                                  &trans    &trans    &trans  &trans     &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                  &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans    &trans  &trans     &trans  &trans
                        &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans    &trans
            >;
        };
    };
};
